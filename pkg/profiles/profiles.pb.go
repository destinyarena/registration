// gRPC for Accounts database

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: profiles.proto

package profiles

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdRequest) Reset() {
	*x = IdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdRequest) ProtoMessage() {}

func (x *IdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdRequest.ProtoReflect.Descriptor instead.
func (*IdRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{0}
}

func (x *IdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iphash string `protobuf:"bytes,1,opt,name=iphash,proto3" json:"iphash,omitempty"`
}

func (x *IPRequest) Reset() {
	*x = IPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPRequest) ProtoMessage() {}

func (x *IPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPRequest.ProtoReflect.Descriptor instead.
func (*IPRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{1}
}

func (x *IPRequest) GetIphash() string {
	if x != nil {
		return x.Iphash
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{2}
}

type ProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Discord string `protobuf:"bytes,1,opt,name=discord,proto3" json:"discord,omitempty"`
	Bungie  string `protobuf:"bytes,2,opt,name=bungie,proto3" json:"bungie,omitempty"`
	Faceit  string `protobuf:"bytes,3,opt,name=faceit,proto3" json:"faceit,omitempty"`
	Iphash  string `protobuf:"bytes,4,opt,name=iphash,proto3" json:"iphash,omitempty"`
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{3}
}

func (x *ProfileRequest) GetDiscord() string {
	if x != nil {
		return x.Discord
	}
	return ""
}

func (x *ProfileRequest) GetBungie() string {
	if x != nil {
		return x.Bungie
	}
	return ""
}

func (x *ProfileRequest) GetFaceit() string {
	if x != nil {
		return x.Faceit
	}
	return ""
}

func (x *ProfileRequest) GetIphash() string {
	if x != nil {
		return x.Iphash
	}
	return ""
}

type ProfileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Discord string `protobuf:"bytes,2,opt,name=discord,proto3" json:"discord,omitempty"`
	Bungie  string `protobuf:"bytes,3,opt,name=bungie,proto3" json:"bungie,omitempty"`
	Faceit  string `protobuf:"bytes,4,opt,name=faceit,proto3" json:"faceit,omitempty"`
	Banned  bool   `protobuf:"varint,5,opt,name=banned,proto3" json:"banned,omitempty"`
	Iphash  string `protobuf:"bytes,6,opt,name=iphash,proto3" json:"iphash,omitempty"`
}

func (x *ProfileReply) Reset() {
	*x = ProfileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiles_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileReply) ProtoMessage() {}

func (x *ProfileReply) ProtoReflect() protoreflect.Message {
	mi := &file_profiles_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileReply.ProtoReflect.Descriptor instead.
func (*ProfileReply) Descriptor() ([]byte, []int) {
	return file_profiles_proto_rawDescGZIP(), []int{4}
}

func (x *ProfileReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProfileReply) GetDiscord() string {
	if x != nil {
		return x.Discord
	}
	return ""
}

func (x *ProfileReply) GetBungie() string {
	if x != nil {
		return x.Bungie
	}
	return ""
}

func (x *ProfileReply) GetFaceit() string {
	if x != nil {
		return x.Faceit
	}
	return ""
}

func (x *ProfileReply) GetBanned() bool {
	if x != nil {
		return x.Banned
	}
	return false
}

func (x *ProfileReply) GetIphash() string {
	if x != nil {
		return x.Iphash
	}
	return ""
}

var File_profiles_proto protoreflect.FileDescriptor

var file_profiles_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x1b, 0x0a, 0x09, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x09, 0x49, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x68, 0x61, 0x73, 0x68, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x72, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63,
	0x65, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x70, 0x68, 0x61, 0x73, 0x68, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x67, 0x69, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x63, 0x65, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61,
	0x63, 0x65, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x70, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70,
	0x68, 0x61, 0x73, 0x68, 0x32, 0xa8, 0x03, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x42, 0x79, 0x49, 0x50, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x2d, 0x0a, 0x03, 0x42, 0x61, 0x6e, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2f,
	0x0a, 0x05, 0x55, 0x6e, 0x62, 0x61, 0x6e, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42,
	0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_profiles_proto_rawDescOnce sync.Once
	file_profiles_proto_rawDescData = file_profiles_proto_rawDesc
)

func file_profiles_proto_rawDescGZIP() []byte {
	file_profiles_proto_rawDescOnce.Do(func() {
		file_profiles_proto_rawDescData = protoimpl.X.CompressGZIP(file_profiles_proto_rawDescData)
	})
	return file_profiles_proto_rawDescData
}

var file_profiles_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_profiles_proto_goTypes = []interface{}{
	(*IdRequest)(nil),      // 0: profiles.IdRequest
	(*IPRequest)(nil),      // 1: profiles.IPRequest
	(*Empty)(nil),          // 2: profiles.Empty
	(*ProfileRequest)(nil), // 3: profiles.ProfileRequest
	(*ProfileReply)(nil),   // 4: profiles.ProfileReply
}
var file_profiles_proto_depIdxs = []int32{
	0, // 0: profiles.profiles.GetProfile:input_type -> profiles.IdRequest
	2, // 1: profiles.profiles.GetAllProfiles:input_type -> profiles.Empty
	3, // 2: profiles.profiles.CreateProfile:input_type -> profiles.ProfileRequest
	1, // 3: profiles.profiles.GetProfilesByIP:input_type -> profiles.IPRequest
	0, // 4: profiles.profiles.RemoveProfile:input_type -> profiles.IdRequest
	0, // 5: profiles.profiles.Ban:input_type -> profiles.IdRequest
	0, // 6: profiles.profiles.Unban:input_type -> profiles.IdRequest
	4, // 7: profiles.profiles.GetProfile:output_type -> profiles.ProfileReply
	4, // 8: profiles.profiles.GetAllProfiles:output_type -> profiles.ProfileReply
	4, // 9: profiles.profiles.CreateProfile:output_type -> profiles.ProfileReply
	4, // 10: profiles.profiles.GetProfilesByIP:output_type -> profiles.ProfileReply
	2, // 11: profiles.profiles.RemoveProfile:output_type -> profiles.Empty
	2, // 12: profiles.profiles.Ban:output_type -> profiles.Empty
	2, // 13: profiles.profiles.Unban:output_type -> profiles.Empty
	7, // [7:14] is the sub-list for method output_type
	0, // [0:7] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_profiles_proto_init() }
func file_profiles_proto_init() {
	if File_profiles_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_profiles_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiles_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_profiles_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_profiles_proto_goTypes,
		DependencyIndexes: file_profiles_proto_depIdxs,
		MessageInfos:      file_profiles_proto_msgTypes,
	}.Build()
	File_profiles_proto = out.File
	file_profiles_proto_rawDesc = nil
	file_profiles_proto_goTypes = nil
	file_profiles_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProfilesClient is the client API for Profiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfilesClient interface {
	GetProfile(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ProfileReply, error)
	GetAllProfiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Profiles_GetAllProfilesClient, error)
	CreateProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error)
	GetProfilesByIP(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (Profiles_GetProfilesByIPClient, error)
	RemoveProfile(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error)
	Ban(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error)
	Unban(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error)
}

type profilesClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilesClient(cc grpc.ClientConnInterface) ProfilesClient {
	return &profilesClient{cc}
}

func (c *profilesClient) GetProfile(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ProfileReply, error) {
	out := new(ProfileReply)
	err := c.cc.Invoke(ctx, "/profiles.profiles/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) GetAllProfiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Profiles_GetAllProfilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Profiles_serviceDesc.Streams[0], "/profiles.profiles/GetAllProfiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &profilesGetAllProfilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Profiles_GetAllProfilesClient interface {
	Recv() (*ProfileReply, error)
	grpc.ClientStream
}

type profilesGetAllProfilesClient struct {
	grpc.ClientStream
}

func (x *profilesGetAllProfilesClient) Recv() (*ProfileReply, error) {
	m := new(ProfileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profilesClient) CreateProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileReply, error) {
	out := new(ProfileReply)
	err := c.cc.Invoke(ctx, "/profiles.profiles/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) GetProfilesByIP(ctx context.Context, in *IPRequest, opts ...grpc.CallOption) (Profiles_GetProfilesByIPClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Profiles_serviceDesc.Streams[1], "/profiles.profiles/GetProfilesByIP", opts...)
	if err != nil {
		return nil, err
	}
	x := &profilesGetProfilesByIPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Profiles_GetProfilesByIPClient interface {
	Recv() (*ProfileReply, error)
	grpc.ClientStream
}

type profilesGetProfilesByIPClient struct {
	grpc.ClientStream
}

func (x *profilesGetProfilesByIPClient) Recv() (*ProfileReply, error) {
	m := new(ProfileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profilesClient) RemoveProfile(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/profiles.profiles/RemoveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) Ban(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/profiles.profiles/Ban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) Unban(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/profiles.profiles/Unban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilesServer is the server API for Profiles service.
type ProfilesServer interface {
	GetProfile(context.Context, *IdRequest) (*ProfileReply, error)
	GetAllProfiles(*Empty, Profiles_GetAllProfilesServer) error
	CreateProfile(context.Context, *ProfileRequest) (*ProfileReply, error)
	GetProfilesByIP(*IPRequest, Profiles_GetProfilesByIPServer) error
	RemoveProfile(context.Context, *IdRequest) (*Empty, error)
	Ban(context.Context, *IdRequest) (*Empty, error)
	Unban(context.Context, *IdRequest) (*Empty, error)
}

// UnimplementedProfilesServer can be embedded to have forward compatible implementations.
type UnimplementedProfilesServer struct {
}

func (*UnimplementedProfilesServer) GetProfile(context.Context, *IdRequest) (*ProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (*UnimplementedProfilesServer) GetAllProfiles(*Empty, Profiles_GetAllProfilesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllProfiles not implemented")
}
func (*UnimplementedProfilesServer) CreateProfile(context.Context, *ProfileRequest) (*ProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (*UnimplementedProfilesServer) GetProfilesByIP(*IPRequest, Profiles_GetProfilesByIPServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProfilesByIP not implemented")
}
func (*UnimplementedProfilesServer) RemoveProfile(context.Context, *IdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProfile not implemented")
}
func (*UnimplementedProfilesServer) Ban(context.Context, *IdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (*UnimplementedProfilesServer) Unban(context.Context, *IdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unban not implemented")
}

func RegisterProfilesServer(s *grpc.Server, srv ProfilesServer) {
	s.RegisterService(&_Profiles_serviceDesc, srv)
}

func _Profiles_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.profiles/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).GetProfile(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_GetAllProfiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfilesServer).GetAllProfiles(m, &profilesGetAllProfilesServer{stream})
}

type Profiles_GetAllProfilesServer interface {
	Send(*ProfileReply) error
	grpc.ServerStream
}

type profilesGetAllProfilesServer struct {
	grpc.ServerStream
}

func (x *profilesGetAllProfilesServer) Send(m *ProfileReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Profiles_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.profiles/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).CreateProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_GetProfilesByIP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IPRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfilesServer).GetProfilesByIP(m, &profilesGetProfilesByIPServer{stream})
}

type Profiles_GetProfilesByIPServer interface {
	Send(*ProfileReply) error
	grpc.ServerStream
}

type profilesGetProfilesByIPServer struct {
	grpc.ServerStream
}

func (x *profilesGetProfilesByIPServer) Send(m *ProfileReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Profiles_RemoveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).RemoveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.profiles/RemoveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).RemoveProfile(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.profiles/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Ban(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_Unban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Unban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profiles.profiles/Unban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Unban(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Profiles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "profiles.profiles",
	HandlerType: (*ProfilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _Profiles_GetProfile_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _Profiles_CreateProfile_Handler,
		},
		{
			MethodName: "RemoveProfile",
			Handler:    _Profiles_RemoveProfile_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _Profiles_Ban_Handler,
		},
		{
			MethodName: "Unban",
			Handler:    _Profiles_Unban_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllProfiles",
			Handler:       _Profiles_GetAllProfiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProfilesByIP",
			Handler:       _Profiles_GetProfilesByIP_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "profiles.proto",
}
